{"version":3,"sources":["serviceWorker.js","components/Chat/Chat.js","components/Messages/Message/Message.js","components/Messages/Messages.js","components/InfoBar/InfoBar.js","components/Input/Input.js","components/Join/Join.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","socket","Message","message","text","isSentByCurrentUser","user","name","trim","toLowerCase","className","id","htmlFor","style","fontSize","date","Date","hours","getHours","minutes","getMinutes","ampm","strTime","formatTwoDigits","digit","slice","tempDate","getDate","getMonth","getFullYear","Messages","messages","followButtonClassName","scrollViewClassName","map","i","key","InfoBar","room","href","type","required","for","Input","setMessage","sendMessage","placeholder","value","onChange","target","onKeyPress","event","onClick","e","class","data-position","data-tooltip","Chat","useState","setName","setRoom","users","setUsers","setMessages","useEffect","queryString","parse","search","io","console","log","emit","error","alert","on","options","draggable","edge","inDuration","onCloseEnd","onCloseStart","onOpenEnd","onOpenStart","outDuration","preventScrolling","position","direction","hoverEnabled","toolbarEnabled","transitionMovement","M","Sidenav","init","document","querySelectorAll","FloatingActionButton","Tooltip","height","width","preventDefault","SignIn","to","App","path","exact","component","Join","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fe8aeb48.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport M from \"materialize-css\";\n// import TextContainer from \"../TextContainer/TextContainer\";\nimport Messages from \"../Messages/Messages\";\nimport InfoBar from \"../InfoBar/InfoBar\";\nimport Input from \"../Input/Input\";\n\nimport \"./Chat.css\";\n\nconst ENDPOINT = \"//localhost:5000\";\n\nlet socket;\n\nconst Chat = ({ location }) => {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [users, setUsers] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    const { name, room } = queryString.parse(location.search);\n\n    socket = io(ENDPOINT);\n    console.log(users);\n\n    setRoom(room);\n    setName(name);\n\n    socket.emit(\"join\", { name, room }, (error) => {\n      if (error) {\n        alert(error);\n      }\n    });\n    // eslint-disable-next-line\n  }, [location.search]);\n\n  useEffect(() => {\n    socket.on(\"message\", (message) => {\n      setMessages((messages) => [...messages, message]);\n    });\n\n    socket.on(\"roomData\", ({ users }) => {\n      setUsers(users);\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\n    }\n  };\n\n  let options = {\n    draggable: true,\n    edge: \"left\",\n    inDuration: 250,\n    onCloseEnd: null,\n    onCloseStart: null,\n    onOpenEnd: null,\n    onOpenStart: null,\n    outDuration: 200,\n    preventScrolling: true,\n    position: \"top\",\n    direction: \"top\",\n    hoverEnabled: true,\n    toolbarEnabled: true,\n    transitionMovement: \"30px\",\n  };\n\n  M.Sidenav.init(document.querySelectorAll(\".sidenav\"), options);\n\n  M.FloatingActionButton.init(\n    document.querySelectorAll(\".fixed-action-btn\"),\n    options\n  );\n\n  M.Tooltip.init(document.querySelectorAll(\".tooltipped\"), options);\n\n  return (\n    <Fragment>\n      <InfoBar room={room} />\n      <div className=\"container\" style={{ height: \"90%\", width: \"90%\" }}>\n        <Messages messages={messages} name={name} />\n        <Input\n          message={message}\n          setMessage={setMessage}\n          sendMessage={sendMessage}\n        />\n      </div>\n      {/* <footer>\n        <a href=\"https://flagsoluciones.com/\" onClick={(e) => sendMessage(e)}>\n          ®Flag Soluciones SAS\n        </a>\n      </footer> */}\n    </Fragment>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\n// import M from \"materialize-css\";\nimport \"./Message.css\";\n\nconst Message = ({ message: { text, user }, name }) => {\n  let isSentByCurrentUser = false;\n\n  const trimmedName = name.trim().toLowerCase();\n\n  if (user === trimmedName) {\n    isSentByCurrentUser = true;\n  }\n\n  // let options = {\n  //   inDuration: 250,\n  //   onCloseEnd: null,\n  //   onCloseStart: null,\n  //   onOpenEnd: null,\n  //   onOpenStart: null,\n  //   outDuration: 200,\n  // };\n\n  // M.Materialbox.init(document.querySelectorAll(\".materialboxed\"), options);\n\n  const getDate = () => {\n    let date = new Date();\n    let hours = date.getHours();\n    let minutes = date.getMinutes();\n    let ampm = hours >= 12 ? \"pm\" : \"am\";\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    let strTime = `${hours}:${minutes}${ampm}`;\n\n    let formatTwoDigits = (digit) => (\"0\" + digit).slice(-2);\n    let tempDate = new Date();\n    let strDate = `${formatTwoDigits(tempDate.getDate())}.${formatTwoDigits(\n      tempDate.getMonth() + 1\n    )}.${tempDate.getFullYear()} `;\n    return strDate + strTime;\n  };\n\n  return isSentByCurrentUser ? (\n    <div className=\"messageContainerRight justifyEnd\">\n      <div className=\"messageBox backgroundRed\">\n        <span className=\"messageText\">{text}</span>\n      </div>\n      <i className=\"material-icons sentText pr-10\">person</i>\n    </div>\n  ) : (\n    <div className=\"messageContainerLeft justifyStart\">\n      <div>\n        <p className=\"sentText pr-10\">\n          <i className=\"material-icons\">adb</i>\n        </p>\n      </div>\n      <div className=\"messageBox backgroundLight\">\n        <div className=\"input-field\">\n          <span className=\"messageText colorDark validate\" id=\"hora\">\n            {text}\n          </span>\n          <label\n            className=\"active\"\n            htmlFor=\"hora\"\n            style={{ fontSize: \"0.8em\" }}\n          >\n            {getDate()}\n          </label>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n","import React from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\n\nimport Message from \"./Message/Message\";\n\nimport \"./Messages.css\";\n\nconst Messages = ({ messages, name }) => {\n  return (\n    <ScrollToBottom\n      className=\"contenedor\"\n      followButtonClassName=\"icondown\"\n      scrollViewClassName=\"contenedor\"\n    >\n      {messages.map((message, i) => (\n        <div key={i}>\n          <Message message={message} name={name} />\n        </div>\n      ))}\n    </ScrollToBottom>\n  );\n};\n\nexport default Messages;\n","import React, { Fragment } from \"react\";\n// import { Navbar, NavItem, Icon } from \"react-materialize\";\nimport \"./InfoBar.css\";\n\nconst InfoBar = ({ room }) => {\n  return (\n    <Fragment>\n      <nav>\n        <div className=\"nav-wrapper\">\n          <a href=\"#!\" className=\"brand-logo center\">\n            FSA\n          </a>\n          {/* <a\n            href=\"#!\"\n            data-target=\"mobile-demo\"\n            className=\"sidenav-trigger right\"\n          >\n            <i className=\"material-icons\">more_vert</i>\n          </a> */}\n          <form className=\"left\">\n            <div className=\"input-field\">\n              <input id=\"search\" type=\"search\" required />\n              <label className=\"label-icon\" for=\"search\">\n                <i className=\"material-icons\">search</i>\n              </label>\n            </div>\n          </form>\n          <ul className=\"right\">\n            <li>\n              <a href=\"/\">\n                <i className=\"material-icons\">exit_to_app</i>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      {/* <ul className=\"sidenav\" id=\"mobile-demo\">\n        <li>\n          <a href=\"/\">Salir</a>\n        </li>\n      </ul> */}\n    </Fragment>\n  );\n};\n\nexport default InfoBar;\n","import React from \"react\";\n\nconst Input = ({ setMessage, sendMessage, message }) => {\n  return (\n    <form className=\"input-field inline\">\n      <div className=\"row\">\n        <div className=\"col s10\">\n          <input\n            type=\"text\"\n            placeholder=\"Escribe tu pregunta\"\n            value={message}\n            onChange={({ target: { value } }) => setMessage(value)}\n            onKeyPress={(event) =>\n              event.key === \"Enter\" ? sendMessage(event) : null\n            }\n          />\n        </div>\n        <div className=\"col s1\">\n          <a\n            href=\"#!\"\n            className=\"btn-floating btn-large waves-effect waves-light red darken-4 animate__animated animate__rollIn\"\n            onClick={(e) => sendMessage(e)}\n          >\n            <i className=\"material-icons\">near_me</i>\n          </a>\n        </div>\n        <div className=\"col s1\">\n          <div className=\"fixed-action-btn toolbar\">\n            <a className=\"btn-floating btn-small light-blue darken-4\">\n              <i className=\"large material-icons\">more_vert</i>\n            </a>\n            <ul>\n              <li className=\"waves-effect waves-light\">\n                <a\n                  href=\"#!\"\n                  class=\"btn tooltipped\"\n                  data-position=\"top\"\n                  data-tooltip=\"Lectura de imágenes\"\n                >\n                  <i className=\"material-icons\">photo_size_select_large</i>\n                </a>\n              </li>\n              <li className=\"waves-effect waves-light\">\n                <a\n                  href=\"#!\"\n                  class=\"btn tooltipped\"\n                  data-position=\"top\"\n                  data-tooltip=\"Gestionar Tokens\"\n                >\n                  <i className=\"material-icons\">vpn_key</i>\n                </a>\n              </li>\n              <li className=\"waves-effect waves-light\">\n                <a\n                  href=\"#!\"\n                  class=\"btn tooltipped\"\n                  data-position=\"top\"\n                  data-tooltip=\"Crear usuarios\"\n                >\n                  <i className=\"material-icons\">group_add</i>\n                </a>\n              </li>\n              <li className=\"waves-effect waves-light\">\n                <a\n                  href=\"#!\"\n                  class=\"btn tooltipped\"\n                  data-position=\"top\"\n                  data-tooltip=\"Actualizar aprobadores\"\n                >\n                  <i className=\"material-icons\">update</i>\n                </a>\n              </li>\n              <li className=\"waves-effect waves-light\">\n                <a\n                  href=\"#!\"\n                  class=\"btn tooltipped\"\n                  data-position=\"top\"\n                  data-tooltip=\"Descargar reportes CSV\"\n                >\n                  <i className=\"material-icons\">file_download</i>\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default Input;\n","import React, { useState } from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport './Join.css';\n\nexport default function SignIn() {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n\n  return (\n    <div className=\"joinOuterContainer\">\n      <div className=\"joinInnerContainer\">\n        <h1 className=\"heading\">Join</h1>\n        <div>\n          <input placeholder=\"Name\" className=\"joinInput\" type=\"text\" onChange={(event) => setName(event.target.value)} />\n        </div>\n        <div>\n          <input placeholder=\"Room\" className=\"joinInput mt-20\" type=\"text\" onChange={(event) => setRoom(event.target.value)} />\n        </div>\n        <Link onClick={e => (!name || !room) ? e.preventDefault() : null} to={`/chat?name=${name}&room=${room}`}>\n          <button className={'button mt-20'} type=\"submit\">Sign In</button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Chat from \"./components/Chat/Chat\";\nimport Join from \"./components/Join/Join\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Route path=\"/\" exact component={Join} />\n      <Route path=\"/chat\" component={Chat} />\n    </Router>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}